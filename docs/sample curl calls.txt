https://en.wikiquote.org/w/api.php

queryTitles: {
    format: "json",
    action: "query",
    redirects: "",
    titles: titles
}


getSectionsForPage: {
    format: "json",
    action: "parse",
    prop: "sections",
    pageid: pageId
}

getQuotesForSection: {
    format: "json",
    action: "parse",
    noimages: "",
    pageid: pageId,
    section: sectionIndex
}

queryRandomTitle: {
    format: "json",
    action: "query",
    redirects: "",
    list: "random",
    rnnamespace: "0"
}

getSectionsForPage: {
    format: "json",
    action: "parse",
    prop: "sections",
    pageid: pageId
}


////////////////////////////////////////////////////////////////


curl -d 'format=json&action=query&redirects=&list=random&rnnamespace=0' \
  https://en.wikiquote.org/w/api.php

{
  "batchcomplete": "",
  "continue": {
    "rncontinue": "0.012187802716|0.012230036482|120224|0",
    "continue": "-||"
  },
  "query": {
    "random": [
      {
        "id": 183039,
        "ns": 0,
        "title": "Mark of Love"
      }
    ]
  }
}


curl -d 'format=json&action=query&redirects=&titles=Mark of Love' \
  https://en.wikiquote.org/w/api.php

{
  "batchcomplete": "",
  "query": {
    "pages": {
      "183039": {
        "pageid": 183039,
        "ns": 0,
        "title": "Mark of Love"
      }
    }
  }
}

curl -d 'format=json&action=parse&prop=sections&pageid=183039' \
  https://en.wikiquote.org/w/api.php

{
  "parse": {
    "title": "Mark of Love",
    "pageid": 183039,
    "sections": [
      {
        "toclevel": 1,
        "level": "2",
        "line": "Dialogue",
        "number": "1",
        "index": "1",
        "fromtitle": "Mark_of_Love",
        "byteoffset": 212,
        "anchor": "Dialogue"
      },
      {
        "toclevel": 1,
        "level": "2",
        "line": "Taglines",
        "number": "2",
        "index": "2",
        "fromtitle": "Mark_of_Love",
        "byteoffset": 2045,
        "anchor": "Taglines"
      },
      {
        "toclevel": 1,
        "level": "2",
        "line": "Cast",
        "number": "3",
        "index": "3",
        "fromtitle": "Mark_of_Love",
        "byteoffset": 2208,
        "anchor": "Cast"
      },
      {
        "toclevel": 1,
        "level": "2",
        "line": "External links",
        "number": "4",
        "index": "4",
        "fromtitle": "Mark_of_Love",
        "byteoffset": 2529,
        "anchor": "External_links"
      }
    ]
  }
}


curl -d 'format=json&action=parse&noimages=&pageid=183039&section: 1' \
  https://en.wikiquote.org/w/api.php

{{
  "parse": {
    "title": "Mark of Love",
    "pageid": 183039,
    "revid": 2075492,
    "text": {
      "*": "<h2><span class=\"mw-headline\" id=\"Dialogue\">Dialogue</span><span class=\"mw-editsection\"><span class=\"mw-editsection-bracket\">[</span><a href=\"/w/index.php?title=Mark_of_Love&amp;action=edit&amp;section=1\" title=\"Edit section: Dialogue\">edit</a><span class=\"mw-editsection-bracket\">]</span></span></h2>\n<dl>\n<dd><b>Susy</b>: May I say something? I think Mark’s a genuine, sincere guy with good intentions and a good heart. I think, as I’ve been listening, that you, like all of us, have simply been looking for someone to love the rest of your life. And I don’t think you’re afraid of love. I think it must be scary for anybody to give yourself to someone else with complete confidence. To open yourself up like that. Saying ‘I love you’ is one thing. But it’s really saying ‘I trust you’ isn’t it? I mean, it must be a pretty intimidating thing I think, not knowing what will happen when you throw everything else out the window for somebody. When you truly mean it.</dd>\n</dl>\n<hr width=\"50%\" />\n<dl>\n<dd><b>Claire</b>: You spelled \"colored\" wrong.</dd>\n<dd><b>Mark</b>: Uh, no, actually I think that's the, uh, proper English spelling.</dd>\n<dd><b>Claire</b>: Oh, really?</dd>\n<dd><b>Mark</b>: Mm-hm.</dd>\n<dd><b>Claire</b>: I thought it was the dumb, fake spelling.</dd>\n<dd><b>Mark</b>: Yeah, you know I tried spelling things without it, but, uh, no matter what, I always end up missing... U.</dd>\n</dl>\n<hr width=\"50%\" />\n<dl>\n<dd><b>Mark</b>: She made me realize the feelings I had for someone else. Someone I should have never let go. I was stuck in a pattern. I was walking away from relationships with girls that I didn’t deserve in the first place. Rachel, Trish, Miranda, they’re all great, and they’re all what I thought I wanted, but uh, when they were ready to get serious I wasn’t. And I ran. But Claire, she was different. Claire was more than everything I wanted. She was everything I needed. We were perfect together. But I ran away from her just like all the others. I ran away only to realize that . . . she was the one that I wanted to run after. It took my relationship with Jess to learn that. It took you guys to realize that. This would have never happened without you.</dd>\n</dl>\n<hr width=\"50%\" />\n\n<!-- \nNewPP limit report\nParsed by mw1290\nCached time: 20170506193714\nCache expiry: 2592000\nDynamic content: false\nCPU time usage: 0.000 seconds\nReal time usage: 0.002 seconds\nPreprocessor visited node count: 5/1000000\nPreprocessor generated node count: 0/1500000\nPost‐expand include size: 0/2097152 bytes\nTemplate argument size: 0/2097152 bytes\nHighest expansion depth: 2/40\nExpensive parser function count: 0/500\n-->\n<!--\nTransclusion expansion time report (%,ms,calls,template)\n100.00%    0.000      1 -total\n-->\n"
    },
    "langlinks": [],
    "categories": [],
    "links": [],
    "templates": [],
    "images": [],
    "externallinks": [],
    "sections": [
      {
        "toclevel": 1,
        "level": "2",
        "line": "Dialogue",
        "number": "1",
        "index": "1",
        "fromtitle": "Mark_of_Love",
        "byteoffset": 0,
        "anchor": "Dialogue"
      }
    ],
    "parsewarnings": [],
    "displaytitle": "Mark of Love",
    "iwlinks": [],
    "properties": [
      {
        "name": "wikibase_item",
        "*": "Q23607821"
      }
    ]
  }
}












////////////////////////////////////////////////////////////////


$(document).ready(function() {

  var quote = "How you play, is how you'll be remembered. Go Hard, follow your heart or be forgotten.";
  var author = "-Keshia Chante";
  var tweet = "";

  function quoteReady(newQuote) {
    console.log(newQuote);
    quote = newQuote.quote.replace(/<(?:.|\n)*?>/gm, '');
    author = newQuote.titles.replace(/<(?:.|\n)*?>/gm, '');
    tweet = quote.length + author.length <= 136 ? encodeURIComponent('"' + quote + '" -' + author) : encodeURIComponent('"' + quote.substring(0, 133-author.length)+'..." -'+author);
    if (quote && author) {
       $('#quote').replaceWith('<p id="quote" class="left-align">"' + quote + '"</p>');
       $('#author').replaceWith('<p id="author" class="right-align">-' + author + "</p>");
       $('.twitter-share-button').attr("href", "https://twitter.com/intent/tweet?text=" + tweet);
    }
  }

  $("#getquote").click(function() {
    WikiquoteApi.queryRandomTitle(
      function(title) {
      WikiquoteApi.getRandomQuote(title, function(newQuote) {
        quoteReady(newQuote);
      }
    );},
    function(msg) {
      console.log(msg);
    });
  });
});



//
// WikiquoteApi thanks to Nate Tyler. https://github.com/natetyler/wikiquotes-api
//

var WikiquoteApi = (function() {

  var wqa = {};

  var API_URL = "https://en.wikiquote.org/w/api.php";

  wqa.queryTitles = function(titles, success, error) {
    $.ajax({
      url: API_URL,
      dataType: "jsonp",
      data: {
        format: "json",
        action: "query",
        redirects: "",
        titles: titles
      },

      success: function(result, status) {
        var pages = result.query.pages;
        var pageId = -1;
        for(var p in pages) {
          var page = pages[p];
          if(!("missing" in page)) {
            pageId = page.pageid;
            break;
          }
        }
        if(pageId > 0) {
          success(pageId);
        } else {
          error("No results");
        }
      },

      error: function(xhr, result, status){
        error("Error processing your query");
      }
    });
  };

  wqa.queryRandomTitle = function(success, error) {
    $.ajax({
      url: API_URL,
      dataType: "jsonp",
      data: {
        format: "json",
        action: "query",
        redirects: "",
        list: "random",
        rnnamespace: "0"
      },

      success: function(result, status) {
        var title = result.query.random[0].title;
        if(title !== undefined) {
          success(title);
        } else {
          error("No results");
        }
      },

      error: function(xhr, result, status){
        error("Error processing your query");
      }
    });
  };

  wqa.getSectionsForPage = function(pageId, success, error) {
    $.ajax({
      url: API_URL,
      dataType: "jsonp",
      data: {
        format: "json",
        action: "parse",
        prop: "sections",
        pageid: pageId
      },

      success: function(result, status){
        var sectionArray = [];
        var sections = result.parse.sections;
        for(var s in sections) {
          var splitNum = sections[s].number.split('.');
          if(splitNum.length > 1 && splitNum[0] === "1") {
            sectionArray.push(sections[s].index);
          }
        }
        if(sectionArray.length === 0) {
          sectionArray.push("1");
        }
        success({ titles: result.parse.title, sections: sectionArray });
      },
      error: function(xhr, result, status){
        error("Error getting sections");
      }
    });
  };

  wqa.getQuotesForSection = function(pageId, sectionIndex, success, error) {
    $.ajax({
      url: API_URL,
      dataType: "jsonp",
      data: {
        format: "json",
        action: "parse",
        noimages: "",
        pageid: pageId,
        section: sectionIndex
      },

      success: function(result, status){
        var quotes = result.parse.text["*"];
        var quoteArray = [];

        var $lis = $(quotes).find('li:not(li li)');
        $lis.each(function() {
          $(this).children().remove(':not(b)');
          var $bolds = $(this).find('b');

          if($bolds.length > 0) {
            quoteArray.push($bolds.html());
          } else {
            quoteArray.push($(this).html());
          }
        });
        success({ titles: result.parse.title, quotes: quoteArray });
      },
      error: function(xhr, result, status){
        error("Error getting quotes");
      }
    });
  };

  wqa.openSearch = function(titles, success, error) {
    $.ajax({
      url: API_URL,
      dataType: "jsonp",
      data: {
        format: "json",
        action: "opensearch",
        namespace: 0,
        suggest: "",
        search: titles
      },

      success: function(result, status){
        success(result[1]);
      },
      error: function(xhr, result, status){
        error("Error with opensearch for " + titles);
      }
    });
  };

  wqa.getRandomQuote = function(titles, success, error) {

    var errorFunction = function(msg) {
      error(msg);
    };

    var chooseQuote = function(quotes) {
      var randomNum = Math.floor(Math.random()*quotes.quotes.length);
      success(
         { titles: quotes.titles, quote: quotes.quotes[randomNum] }
      );
    };

    var getQuotes = function(pageId, sections) {
      var randomNum = Math.floor(Math.random()*sections.sections.length);
      wqa.getQuotesForSection(pageId, sections.sections[randomNum], chooseQuote, errorFunction);
    };

    var getSections = function(pageId) {
      wqa.getSectionsForPage(pageId, function(sections) { getQuotes(pageId, sections); }, errorFunction);
    };

    wqa.queryTitles(titles, getSections, errorFunction);
  };

  wqa.getCompletelyRandomQuote = function(success, error) {
      wqa.queryRandomTitle(function(title) {
          wqa.getRandomQuote(title, success, error);
      }, error);
  };

  wqa.capitalizeString = function(input) {
    var inputArray = input.split(' ');
    var output = [];
    for(s in inputArray) {
      output.push(inputArray[s].charAt(0).toUpperCase() + inputArray[s].slice(1));
    }
    return output.join(' ');
  };

  return wqa;
}());
